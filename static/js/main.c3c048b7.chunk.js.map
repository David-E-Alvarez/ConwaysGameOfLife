{"version":3,"sources":["index.js"],"names":["new_board","status_of_cell","grid","i","j","Board","board_status","toggle_cell","handleClick","table_rows","table_data","push","key","className","onClick","App","state","generation","isGameRunning","buttons","type","handle_stop","handle_start","clear_board","setState","new_board_instance","handle_toggle_cell_status","toggle_board_status","prev_state","board_copy","JSON","parse","stringify","this","href","Component","ReactDOM","render","document","getElementById"],"mappings":"gPASMA,G,MAAY,WAEhB,IAFmD,IAAlCC,EAAiC,uDAAhB,kBAAM,GAClCC,EAAO,GACLC,EAAI,EAAGA,EANJ,GAMaA,IAAI,CAC1BD,EAAKC,GAAK,GACV,IAAI,IAAIC,EAAI,EAAGA,EAPH,GAOgBA,IAC1BF,EAAKC,GAAGC,GAAKH,IAGjB,OAAOC,IAKHG,EAAQ,SAAC,GAGb,IAH6C,IAA/BC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,YACtBC,EAAc,SAACL,EAAEC,GAAH,OAASG,EAAYJ,EAAEC,IACrCK,EAAa,GACXN,EAAI,EAAGA,EApBJ,GAoBcA,IAAI,CAE3B,IADA,IAAMO,EAAa,GACXN,EAAI,EAAGA,EArBH,GAqBgBA,IAC1BM,EAAWC,KACT,wBACEC,IAAG,UAAKT,EAAL,YAAUC,GACbS,UAAWP,EAAaH,GAAGC,GAAK,QAAQ,OACxCU,QAAS,kBAAIN,EAAYL,EAAEC,OAIjCK,EAAWE,KAAK,wBAAIC,IAAKT,GAAIO,IAE/B,OAAO,+BAAO,+BAAQD,KAIlBM,E,4MAEJC,MAAQ,CACNV,aAAcN,IACdiB,WAAY,EACZC,eAAe,G,EAGjBC,QAAU,WACR,OAAO,EAAKH,MAAME,cAClB,4BAAQE,KAAK,SAASN,QAAS,EAAKO,aAApC,QACA,4BAAQD,KAAK,SAASN,QAAS,EAAKQ,cAApC,U,EAIFC,YAAc,WACZ,EAAKC,SAAS,CACZlB,aAAcN,GAAU,kBAAK,KAC7BiB,WAAY,K,EAIhBQ,mBAAqB,WACnB,EAAKD,SAAS,CACZlB,aAAcN,IACdiB,WAAW,K,EAKfS,0BAA4B,SAACvB,EAAEC,GAC7B,IAAMuB,EAAsB,SAAAC,GAC1B,IAAMC,EAAaC,KAAKC,MAAMD,KAAKE,UAAUJ,EAAWtB,eAExD,OADAuB,EAAW1B,GAAGC,IAAMyB,EAAW1B,GAAGC,GAC3ByB,GAET,EAAKL,UAAS,SAAAI,GAAU,MAAK,CAC3BtB,aAAcqB,EAAoBC,Q,EAKtCN,aAAe,WACf,EAAKE,SAAS,CAAEN,eAAe,K,EAGhCG,YAAc,WACb,EAAKG,SAAS,CAAEN,eAAe,K,uDAErB,IAAD,EACyCe,KAAKjB,MAA9CV,EADA,EACAA,aAA2BW,GAD3B,EACaC,cADb,EAC2BD,YAClC,OACE,yBAAKJ,UAAU,OACb,qDACA,iCACE,sCACA,4BACE,gHACA,+GACA,gHACA,4HAEF,uBAAGqB,KAAK,+DAAR,cAEF,kBAAC7B,EAAD,CAAOC,aAAcA,EAAcC,YAAa0B,KAAKP,4BACrD,mDACkBT,IAElB,6BACGgB,KAAKd,gB,GArEEgB,aA4ElBC,IAASC,OAAO,kBAACtB,EAAD,MAASuB,SAASC,eAAe,W","file":"static/js/main.c3c048b7.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\n//grid dimensions\nconst rows = 25;\nconst columns = 25;\n\n//initial board\nconst new_board = (status_of_cell = () => false) => {//sets every cell on board to false\n  const grid = [];\n  for(var i = 0; i< rows; i++){\n    grid[i] = [];\n    for(var j = 0; j < columns; j++){\n      grid[i][j] = status_of_cell()\n    }\n  }\n  return grid;\n\n};\n\n//board component\nconst Board = ({board_status, toggle_cell}) =>{\n  const handleClick = (i,j) => toggle_cell(i,j);\n  const table_rows = [];\n  for(var i = 0; i < rows; i++){\n    const table_data = [];\n    for(var j = 0; j < columns; j++){\n      table_data.push(\n        <td\n          key={`${i},${j}`}\n          className={board_status[i][j] ? 'alive':'dead'}\n          onClick={()=>handleClick(i,j)}\n        />\n      );\n    }\n    table_rows.push(<tr key={i}>{table_data}</tr>)\n  } \n  return <table><tbody>{table_rows}</tbody></table>;\n};\n\n\nclass App extends Component {\n  //state\n  state = {\n    board_status: new_board(),\n    generation: 0,\n    isGameRunning: false,\n  };\n  //function for start/stop buttons\n  buttons = () => {\n    return this.state.isGameRunning ?\n    <button type='button' onClick={this.handle_stop}>Stop</button>:\n    <button type='button' onClick={this.handle_start}>Start</button>;\n  }\n\n  //clear board\n  clear_board = () => {\n    this.setState({\n      board_status: new_board(()=> false),\n      generation: 0\n    });\n  }\n  //new board\n  new_board_instance = () => {\n    this.setState({\n      board_status: new_board(),\n      generation:0\n    });\n  }\n\n  //handle cell toggling\n  handle_toggle_cell_status = (i,j) => {\n    const toggle_board_status = prev_state => {\n      const board_copy = JSON.parse(JSON.stringify(prev_state.board_status));\n      board_copy[i][j] = !board_copy[i][j];\n      return board_copy;\n    };\n    this.setState(prev_state => ({\n      board_status: toggle_board_status(prev_state)\n    }))\n  }\n\n  //stop/run state\n  handle_start = () => {\n\t\tthis.setState({ isGameRunning: true });\n\t}\n\n\thandle_stop = () => {\n\t\tthis.setState({ isGameRunning: false });\n\t}\n  render() {\n    const {board_status,isGameRunning,generation} = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Conway's Game of Life</h1>\n        <section>\n          <h5>Rules:</h5>\n          <ul>\n            <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation</li>\n            <li>Any live cell with two or three live neighbours lives on to the next generation</li>\n            <li>Any live cell with more than three live neighbours dies, as if by overpopulation</li>\n            <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction</li>\n          </ul>\n          <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\">Wikipedia</a>\n        </section>\n        <Board board_status={board_status} toggle_cell={this.handle_toggle_cell_status}/>\n        <div>\n          {`Generation: ${generation}`}\n        </div>\n        <div>\n          {this.buttons()}\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}