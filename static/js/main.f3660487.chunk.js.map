{"version":3,"sources":["index.js"],"names":["new_board","status_of_cell","grid","i","j","glider_gun_config","random_config","true_or_false","Math","random","Board","board_status","toggle_cell","table_rows","table_data","push","key","className","onClick","handleClick","App","state","generation","isGameRunning","speed","buttons","type","handle_stop","handle_start","clear_board","setState","glider_func","random_func","handle_toggle_cell_status","toggle_board_status","prev_state","board_copy","JSON","parse","stringify","handle_step","next_step","calc_neighbors","row","col","reduce","true_neighbors","neighbor","x","y","true_neighbors_total","prev_props","this","iterate","game_started","game_stopped","clearInterval","timerID","setInterval","href","disabled","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3660487.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\n//grid dimensions\nconst rows = 25;\nconst columns = 35;\n\n//initial board\nconst new_board = (status_of_cell = () => false) => {//sets every cell on board to false\n  const grid = [];\n  for(let i = 0; i< rows; i++){\n    grid[i] = [];\n    for(let j = 0; j < columns; j++){\n      grid[i][j] = status_of_cell()\n    }\n  }\n  return grid;\n\n};\n//glider gun config\nconst glider_gun_config = (status_of_cell = () => false) => {//sets every cell on board to false\n  const grid = [];\n  for(let i = 0; i< rows; i++){\n    grid[i] = [];\n    for(let j = 0; j < columns; j++){\n      grid[i][j] = status_of_cell()\n    }\n  }\n  //this makes grids true to make glider shape\n  grid[0][1] = true;\n  grid[2][0] = true;\n  grid[2][1] = true;\n  grid[2][2] = true;\n  grid[1][2] = true;\n\n  return grid;\n\n};\n//random config\nconst random_config = (true_or_false = () => Math.random() < 0.5) => {\n  const grid = [];\n  for(let i = 0; i< rows; i++){\n    grid[i] = [];\n    for(let j = 0; j < columns; j++){\n      grid[i][j] = true_or_false()\n    }\n  }\n  return grid;\n}\n\n//board component\nconst Board = ({board_status, toggle_cell}) =>{\n  const handleClick = (i,j) => toggle_cell(i,j);\n  const table_rows = [];\n  for(let i = 0; i < rows; i++){\n    const table_data = [];\n    for(let j = 0; j < columns; j++){\n      table_data.push(\n        <td\n          key={`${i},${j}`}\n          className={board_status[i][j] ? 'alive':'dead'}\n          onClick={()=>handleClick(i,j)}\n        />\n      );\n    }\n    table_rows.push(<tr key={i}>{table_data}</tr>)\n  } \n  return <table><tbody>{table_rows}</tbody></table>;\n};\n\n\nclass App extends Component {\n  //state\n  state = {\n    board_status: new_board(),\n    generation: 0,\n    isGameRunning: false,\n    speed: 25,\n  };\n  //function for start/stop buttons\n  buttons = () => {\n    return this.state.isGameRunning ?\n    <button type='button' onClick={this.handle_stop}>Stop</button>:\n    <button type='button' onClick={this.handle_start}>Start</button>;\n  }\n\n  //clear board\n  clear_board = () => {\n    this.setState({\n      board_status: new_board(()=> false),\n      generation: 0\n    });\n  }\n \n  //glider that calls function to configure glider gun\n  glider_func = () => {\n    this.setState({\n      board_status: glider_gun_config(),\n      generation: 0\n    })\n  }\n  //random configuration\n  random_func = () => {\n    this.setState({\n      board_status: random_config(),\n      generation: 0\n    })\n  }\n\n  //handle cell toggling\n  handle_toggle_cell_status = (i,j) => {\n    const toggle_board_status = prev_state => {\n      const board_copy = JSON.parse(JSON.stringify(prev_state.board_status));\n      board_copy[i][j] = !board_copy[i][j];\n      return board_copy;\n    };\n    this.setState(prev_state => ({\n      board_status: toggle_board_status(prev_state)\n    }))\n  }\n\n  //method to handle steps\n  handle_step = () => {\n    const next_step = prev_state =>{\n      const board_status = prev_state.board_status;\n      const board_copy = JSON.parse(JSON.stringify(board_status));\n      //function to calcualte neighbors and updates individual cell status and return cloned board status\n      const calc_neighbors = (row,col) => {\n        const calc_neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        return calc_neighbors.reduce((true_neighbors, neighbor) => {\n          const x = row + neighbor[0];\n          const y = col + neighbor[1];\n          const is_neighbor_on_grid = (x >= 0 && x < rows && y >= 0 && y < columns);\n          if(true_neighbors < 4 && is_neighbor_on_grid && board_status[x][y]){\n            return true_neighbors + 1;\n          }else{\n            return true_neighbors;\n          }\n        },0);\n      };\n      //update cloned board status\n      for(let i = 0; i < rows; i++){\n        for(let j = 0; j < columns; j++){\n          const true_neighbors_total = calc_neighbors(i,j);\n          if(!board_status[i][j]){\n            if(true_neighbors_total === 3) board_copy[i][j] = true;\n          }else{\n            if(true_neighbors_total < 2 || true_neighbors_total > 3) board_copy[i][j] = false;\n          }\n        }\n      }\n      return board_copy;\n    };\n    //iterate\n    this.setState(prev_state =>({\n      board_status: next_step(prev_state),\n      generation: prev_state.generation + 1\n    }));\n  }\n\n  //stop/run state\n  handle_start = () => {\n\t\tthis.setState({ isGameRunning: true });\n\t}\n\n\thandle_stop = () => {\n\t\tthis.setState({ isGameRunning: false });\n  }\n  //for stop and start\n  componentDidUpdate(prev_props,prev_state){\n    const {isGameRunning, speed} = this.state;\n    const iterate = prev_state.speed !== speed;\n    const game_started = !prev_state.isGameRunning && isGameRunning;\n    const game_stopped = prev_state.isGameRunning && !isGameRunning;\n    if((isGameRunning && iterate)||game_stopped){\n      clearInterval(this.timerID)\n    }\n    if((isGameRunning && iterate)||game_started){\n      this.timerID = setInterval(()=>{\n        this.handle_step();\n      },iterate)\n    }\n  }\n\n  render() {\n    const {board_status,isGameRunning,generation} = this.state;\n    return (\n      <div className=\"App\">\n      <h1>Conway's Game of Life</h1>      \n        <section>\n          <h5>Rules:</h5>\n          <ul>\n            <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation</li>\n            <li>Any live cell with two or three live neighbours lives on to the next generation</li>\n            <li>Any live cell with more than three live neighbours dies, as if by overpopulation</li>\n            <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction</li>\n          </ul>\n          <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\">Wikipedia</a>\n        </section>\n        <Board board_status={board_status} toggle_cell={this.handle_toggle_cell_status}/>\n        <div>\n          {`Generation: ${generation}`}\n        </div>\n        <div>\n          {this.buttons()}\n          <button type='button' disabled={isGameRunning} onClick={this.handle_step}>Step</button>\n          <button type='button' onClick={this.clear_board}>Clear Board</button>\n          <br></br><label>preset configurations: </label>\n          <button type='button' onClick={this.glider_func}>Glider</button>\n          <button type='button' onClick={this.random_func}>Random</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}